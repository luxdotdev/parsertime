// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

datasource db {
  provider = "postgresql"
  url      = env("POSTGRES_PRISMA_URL")
}

generator client {
  provider = "prisma-client-js"
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String? @db.Text
  access_token      String? @db.Text
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String? @db.Text
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@index([userId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@index([userId])
}

model User {
  id            String        @id @default(cuid())
  name          String?
  email         String?       @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  role          UserRole      @default(USER)
  teamId        Int?
  teams         Team[]
  managedTeams  TeamManager[]
  stripeId      String?       @unique
  billingPlan   BillingPlan   @default(FREE)

  @@index([teamId])
}

enum BillingPlan {
  FREE
  BASIC
  PREMIUM
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

model Team {
  id        Int           @id @default(autoincrement())
  name      String
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt
  image     String?
  users     User[]
  scrims    Scrim[]
  ownerId   String
  managers  TeamManager[]
}

model TeamManager {
  id     Int    @id @default(autoincrement())
  teamId Int
  userId String
  team   Team   @relation(fields: [teamId], references: [id])
  user   User   @relation(fields: [userId], references: [id])

  @@unique([teamId, userId])
  @@index([userId])
}

enum UserRole {
  ADMIN
  MANAGER
  USER
}

model TeamInviteToken {
  id      Int      @id @default(autoincrement())
  teamId  Int
  email   String
  token   String   @unique
  expires DateTime
}

model Scrim {
  id        Int      @id @default(autoincrement())
  name      String
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  date      DateTime
  maps      Map[]
  Team      Team?    @relation(fields: [teamId], references: [id])
  teamId    Int?
  creatorId String
  guestMode Boolean  @default(false)

  @@index([teamId])
}

model Map {
  id        Int       @id @default(autoincrement())
  name      String
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
  mapData   MapData[]
  Scrim     Scrim?    @relation(fields: [scrimId], references: [id])
  scrimId   Int?

  @@index([scrimId])
}

enum EventType {
  defensive_assist
  dva_remech
  echo_duplicate_end
  echo_duplicate_start
  hero_spawn
  hero_swap
  kill
  match_end
  match_start
  mercy_rez
  objective_captured
  objective_updated
  offensive_assist
  payload_progress
  point_progress
  player_stat
  remech_charged
  round_end
  round_start
  setup_complete
  ultimate_charged
  ultimate_end
  ultimate_start
}

enum MapType {
  Clash
  Control
  Escort
  Flashpoint
  Hybrid
  Push
}

model MapData {
  id                   Int                  @id @default(autoincrement())
  scrimId              Int
  userId               String
  createdAt            DateTime             @default(now())
  updatedAt            DateTime             @updatedAt
  defensive_assist     DefensiveAssist[]
  DvaRemech            DvaRemech[]
  echo_duplicate_end   EchoDuplicateEnd[]
  echo_duplicate_start EchoDuplicateStart[]
  hero_spawn           HeroSpawn[]
  hero_swap            HeroSwap[]
  kill                 Kill[]
  match_end            MatchEnd[]
  match_start          MatchStart[]
  MercyRez             MercyRez[]
  objective_captured   ObjectiveCaptured[]
  objective_updated    ObjectiveUpdated[]
  offensive_assist     OffensiveAssist[]
  payload_progress     PayloadProgress[]
  player_stat          PlayerStat[]
  point_progress       PointProgress[]
  RemechCharged        RemechCharged[]
  round_end            RoundEnd[]
  round_start          RoundStart[]
  setup_complete       SetupComplete[]
  ultimate_charged     UltimateCharged[]
  ultimate_end         UltimateEnd[]
  ultimate_start       UltimateStart[]
  Map                  Map?                 @relation(fields: [mapId], references: [id])
  mapId                Int?

  @@index([scrimId])
  @@index([mapId])
}

model DefensiveAssist {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(defensive_assist)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String
  MapData         MapData?  @relation(fields: [MapDataId], references: [id])
  MapDataId       Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model DvaRemech {
  id          Int       @id @default(autoincrement())
  scrimId     Int
  event_type  EventType @default(dva_remech)
  match_time  Float
  player_team String
  player_name String
  player_hero String
  ultimate_id Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model EchoDuplicateEnd {
  id          Int       @id @default(autoincrement())
  scrimId     Int
  event_type  EventType @default(echo_duplicate_end)
  match_time  Float
  player_team String
  player_name String
  player_hero String
  ultimate_id Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model EchoDuplicateStart {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(echo_duplicate_start)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String
  ultimate_id     Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model HeroSpawn {
  id               Int       @id @default(autoincrement())
  scrimId          Int
  event_type       EventType @default(hero_spawn)
  match_time       Float
  player_team      String
  player_name      String
  player_hero      String
  previous_hero    Int?
  hero_time_played Float
  MapData          MapData?  @relation(fields: [MapDataId], references: [id])
  MapDataId        Int?

  @@index([MapDataId])
}

model HeroSwap {
  id               Int       @id @default(autoincrement())
  scrimId          Int
  event_type       EventType @default(hero_swap)
  match_time       Float
  player_team      String
  player_name      String
  player_hero      String
  previous_hero    String
  hero_time_played Float
  MapData          MapData?  @relation(fields: [MapDataId], references: [id])
  MapDataId        Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model Kill {
  id               Int       @id @default(autoincrement())
  scrimId          Int
  event_type       EventType @default(kill)
  match_time       Float
  attacker_team    String
  attacker_name    String
  attacker_hero    String
  victim_team      String
  victim_name      String
  victim_hero      String
  event_ability    String
  event_damage     Int
  is_critical_hit  String
  is_environmental String

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model MatchEnd {
  id           Int       @id @default(autoincrement())
  scrimId      Int
  event_type   EventType @default(match_end)
  match_time   Float
  round_number Int
  team_1_score Int
  team_2_score Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model MatchStart {
  id          Int       @id @default(autoincrement())
  scrimId     Int
  event_type  EventType @default(match_start)
  match_time  Float
  map_name    String
  map_type    MapType
  team_1_name String
  team_2_name String

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model MercyRez {
  id                 Int       @id @default(autoincrement())
  scrimId            Int
  event_type         EventType @default(mercy_rez)
  match_time         Float
  resurrecter_team   String
  resurrecter_player String
  resurrecter_hero   String
  resurrectee_team   String
  resurrectee_player String
  resurrectee_hero   String

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model ObjectiveCaptured {
  id                      Int       @id @default(autoincrement())
  scrimId                 Int
  event_type              EventType @default(objective_captured)
  match_time              Float
  round_number            Int
  capturing_team          String
  objective_index         Int
  control_team_1_progress Float
  control_team_2_progress Float
  match_time_remaining    Float

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model ObjectiveUpdated {
  id                       Int       @id @default(autoincrement())
  scrimId                  Int
  event_type               EventType @default(objective_updated)
  match_time               Float
  round_number             Int
  previous_objective_index Int
  current_objective_index  Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model OffensiveAssist {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(offensive_assist)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model PayloadProgress {
  id                       Int       @id @default(autoincrement())
  scrimId                  Int
  event_type               EventType @default(payload_progress)
  match_time               Float
  round_number             Int
  capturing_team           String
  objective_index          Int
  payload_capture_progress Float

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model PlayerStat {
  id                           Int       @id @default(autoincrement())
  scrimId                      Int
  event_type                   EventType @default(player_stat)
  match_time                   Float
  round_number                 Int
  player_team                  String
  player_name                  String
  player_hero                  String
  eliminations                 Int
  final_blows                  Int
  deaths                       Int
  all_damage_dealt             Float
  barrier_damage_dealt         Float
  hero_damage_dealt            Float
  healing_dealt                Float
  healing_received             Float
  self_healing                 Float
  damage_taken                 Float
  damage_blocked               Float
  defensive_assists            Int
  offensive_assists            Int
  ultimates_earned             Int
  ultimates_used               Int
  multikill_best               Int
  multikills                   Int
  solo_kills                   Int
  objective_kills              Int
  environmental_kills          Int
  environmental_deaths         Int
  critical_hits                Int
  critical_hit_accuracy        Float
  scoped_accuracy              Float
  scoped_critical_hit_accuracy Float
  scoped_critical_hit_kills    Int
  shots_fired                  Int
  shots_hit                    Int
  shots_missed                 Int
  scoped_shots                 Int
  scoped_shots_hit             Int
  weapon_accuracy              Float
  hero_time_played             Float

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model PointProgress {
  id                     Int       @id @default(autoincrement())
  scrimId                Int
  event_type             EventType @default(point_progress)
  match_time             Float
  round_number           Int
  capturing_team         String
  objective_index        Int
  point_capture_progress Float

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model RemechCharged {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(remech_charged)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String
  ultimate_id     Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model RoundEnd {
  id                      Int       @id @default(autoincrement())
  scrimId                 Int
  event_type              EventType @default(round_end)
  match_time              Float
  round_number            Int
  capturing_team          String
  team_1_score            Int
  team_2_score            Int
  objective_index         Int
  control_team_1_progress Float
  control_team_2_progress Float
  match_time_remaining    Float

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model RoundStart {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(round_start)
  match_time      Float
  round_number    Int
  capturing_team  String
  team_1_score    Int
  team_2_score    Int
  objective_index Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model SetupComplete {
  id                   Int       @id @default(autoincrement())
  scrimId              Int
  event_type           EventType @default(setup_complete)
  match_time           Float
  round_number         Int
  match_time_remaining Float

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model UltimateCharged {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(ultimate_charged)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String
  ultimate_id     Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model UltimateEnd {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(ultimate_end)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String
  ultimate_id     Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}

model UltimateStart {
  id              Int       @id @default(autoincrement())
  scrimId         Int
  event_type      EventType @default(ultimate_start)
  match_time      Float
  player_team     String
  player_name     String
  player_hero     String
  hero_duplicated String
  ultimate_id     Int

  MapData   MapData? @relation(fields: [MapDataId], references: [id])
  MapDataId Int?

  @@index([scrimId])
  @@index([MapDataId])
}
